#include "spi5.h"

/**
  * @name 	SPI5_SetSpeed()
  * @brief 	SPI速度=fAPB2/分频系数
  * @param	SPI_BaudRate_Prescaler:分频系数	@ref SPI_BaudRatePrescaler_2~SPI_BaudRatePrescaler_256
  * @return	None
  */
void SPI5_SetSpeed(u8 SPI_BaudRatePrescaler)
{
  	assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
	SPI5->CR1&=0XFFC7;//位3-5清零，用来设置波特率
	SPI5->CR1|=SPI_BaudRatePrescaler;	//设置SPI5速度 
	SPI_Cmd(SPI5,ENABLE); //使能SPI5
}

void Spi5_Init(){
	static uint8_t SPI6isInit = 0;
	if(SPI6isInit == 0)
		SPI6isInit++;
	else
		return;
	GPIO_InitTypeDef  GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);//使能GPIOB时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI5, ENABLE);//使能SPI5时钟

	//GPIOFB3,4,5初始化设置
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7|GPIO_Pin_9|GPIO_Pin_8;//PB3~5复用功能输出	
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;//上拉
	GPIO_Init(GPIOF, &GPIO_InitStructure);//初始化

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;//PB3~5复用功能输出	
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//复用功能
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;//上拉
	GPIO_Init(GPIOF, &GPIO_InitStructure);//初始化

	GPIO_PinAFConfig(GPIOF,GPIO_PinSource7,GPIO_AF_SPI5); //PB3复用为 SPI5
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource9,GPIO_AF_SPI5); //PB4复用为 SPI5
	GPIO_PinAFConfig(GPIOF,GPIO_PinSource8,GPIO_AF_SPI5); //PB5复用为 SPI5

	//这里只针对SPI口初始化
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5,ENABLE);//复位SPI5
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5,DISABLE);//停止复位SPI5

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  //设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		//设置SPI工作模式:设置为主SPI
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;		//设置SPI的数据大小:SPI发送接收8位帧结构
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;		//串行同步时钟的空闲状态为高电平
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;	//串行同步时钟的第二个跳变沿（上升或下降）数据被采样
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;		//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;		//定义波特率预分频的值:波特率预分频值为256
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始
	SPI_InitStructure.SPI_CRCPolynomial = 10;	//stm32f4xx.h 7881 7882
	SPI_Init(SPI5, &SPI_InitStructure);  //根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器

	SPI_Cmd(SPI5, ENABLE); //使能SPI外设
	SPI5_SetSpeed(SPI_BaudRatePrescaler_16); 
	SPI5_ReadWriteByte(0xff);//启动传输		 
} 

/**
  * @name 	SPI5_ReadWriteByte
  * @brief 	SPI读写函数
  * @param	TxData:要发送的8位数据
  * @return	接收的8位数据
  */
u8 SPI5_ReadWriteByte(u8 TxData)
{	
	u8 txflag=1;
	u8 count=0;
	while(1)
	{
		if(txflag==1&&SPI_I2S_GetFlagStatus(SPI5, SPI_I2S_FLAG_TXE))
		{	
			for(count=0;count<200;count++){}
			SPI_I2S_SendData(SPI5, TxData); //发送数据
			txflag=0;
		}
		if(txflag==0&&SPI_I2S_GetFlagStatus(SPI5, SPI_I2S_FLAG_RXNE)) //等待SPI接收标志位空
		{
			for(count=0;count<200;count++){}
			return SPI_I2S_ReceiveData(SPI5); //接收数据	
		}		
	}
}
